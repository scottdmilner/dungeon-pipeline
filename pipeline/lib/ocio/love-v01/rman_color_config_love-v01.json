{
    "help": [
        "This file helps RenderMan and its DCC plugins leverage arbitrary OCIO ",
        "configurations by providing:",
        "  - A subset of relevant Roles/ColorSpaces to be displayed in user ",
        "    interfaces.",
        "  - Their corresponding short forms (aliases) which will be inserted in",
        "    the texture names to disambiguate their contents.",
        "  - Conversion rules to allow the texture manager to assign reasonnable",
        "    defaults to new files.",
        "",
        "WARNING: the srgb_linear role must ALWAYS be defined",
        "",
        "This file MUST be named in a specific way:",
        "   rman_color_manager_CONFIGNAME.json",
        "   where CONFIGNAME is the name of the directory containing the config.ocio",
        "   file.",
        "This file can be located in:",
        "   $RMAN_COLOR_CONFIG_DIR",
        "   $RMANTREE/etc",
        "Rules are simple python strings that must eval to True or False.",
        "They can use the following substitution tokens:",
        "        'node_type':  PxrTexture, PxrDomeLight, etc",
        "   'classification':  bxdf, pattern, light, lightfilter, etc",
        "         'img_name':  The image name without its extension",
        "          'img_ext':  The image's extension",
        "        'img_atlas':  True if a texture atlas",
        "         'img_type':  'int' or 'float'",
        "        'img_depth':  8, 16 or 32",
        "        'img_nchan':  the number of channels in the image",
        "       'ocioconfig':  full path of OCIO config",
        "  'ocioconfig_name':  name of OCIO config: 'basic', 'ACES-1.2', etc"
    ],
    "ocio_aliases": {
        "rendering": "acescg",
        "srgb_texture": "srgb_texture",
        "srgb_linear": "srgb_linear",
        "data": "data"
    },
    "ocio_aliases_help": {
        "rendering": "The image is already in the correct color space for rendering (no conversion).",
        "srgb_texture": "The image is a sRGB texture and needs to be converted to rendering space.",
        "srgb_linear": "The image is a sRGB/Rec.709 linear image (like an HDRI) and needs to be converted to rendering space.",
        "data": "The image contains data that should be used as-is (no conversion)."
    },
    "conversion_rules": {
        "pattern": {
            "args": {
                "texture_type": "regular",
                "smode": "periodic",
                "tmode": "periodic",
                "texture_format": "openexr",
                "texture_filter": "catmull-rom",
                "resize": "round-",
                "data_type": "half",
                "compression": "pxr24",
                "compression_level": null,
                "ocioconvert": "srgb_texture"
            },
            "rules": {
                "'%(img_ext)s' in ('.exr', '.hdr')": {
                    "args": {
                        "texture_format": "openexr",
                        "data_type": null,
                        "ocioconvert": "srgb_linear",
                        "compression": null
                    }
                },
                "'%(node_type)s' in ('PxrBump', 'PxrNormalMap')": {
                    "args": {
                        "texture_format": "pixar",
                        "data_type": null,
                        "compression": "lossless",
                        "ocioconvert": "data"
                    }
                },
                "'%(node_type)s' == 'PxrBumpRoughness'": {
                    "args": {
                        "texture_format": "openexr",
                        "data_type": "half",
                        "texture_filter": "box",
                        "compression": "pxr24",
                        "mipfilter": "box",
                        "resize": "round-",
                        "ocioconvert": "data",
                        "bumprough": {
                            "factor": 2.0,
                            "normalmap": 0,
                            "invert": 0,
                            "invertU": 0,
                            "invertV": 0,
                            "refit": 1
                        }
                    }
                },
                "re.search(r'(roughness|rough|anisotropy|aniso|metallic|metalness|normal|bump|height|mask)', '%(img_name)s', flags=re.IGNORECASE) is not None": {
                    "args": {
                        "texture_format": "pixar",
                        "data_type": null,
                        "compression": "lossless",
                        "ocioconvert": "data"
                    }
                },
                "'%(img_ext)s' is '.exr' and '%(img_name)s'.lower().endswith('_acescg')": {
                    "args": {
                        "ocioconvert": "",
                        "texture_format": "openexr",
                        "data_type": null,
                        "compression": null
                    }
                },
                "%(img_atlas)d == True": {
                    "args": {
                        "smode": "clamp",
                        "tmode": "clamp"
                    }
                }
            }
        },
        "light": {
            "args": {
                "texture_type": "regular",
                "smode": "black",
                "tmode": "black",
                "texture_format": "openexr",
                "texture_filter": "gaussian",
                "resize": "round-",
                "data_type": null,
                "compression": "pxr24",
                "compression_level": null,
                "ocioconvert": "srgb_linear"
            },
            "rules": {
                "'%(node_type)s' == 'PxrDomeLight'": {
                    "args": {
                        "texture_type": "envlatl",
                        "smode": "periodic",
                        "tmode": "clamp"
                    }
                }
            }
        },
        "lightfilter": {
            "args": {
                "texture_type": "regular",
                "smode": "black",
                "tmode": "black",
                "texture_format": "openexr",
                "texture_filter": "gaussian",
                "resize": "round-",
                "data_type": "half",
                "compression": "pxr24",
                "compression_level": null
            },
            "rules": {
                "'%(img_type)s' == 'int'":
                {
                    "arg": {
                        "ocioconvert": "srgb_texture"
                    }
                },
                "'%(img_type)s' == 'float'":
                {
                    "args": {
                        "ocioconvert": "srgb_linear"
                    }
                }
            }
        },
        "imageplane": {
            "args": {
                "texture_type": "regular",
                "smode": "black",
                "tmode": "black",
                "texture_format": "openexr",
                "texture_filter": "catmull-rom",
                "resize": "up",
                "data_type": null,
                "compression": "pxr24",
                "compression_level": null
            },
            "rules": {
                "'%(img_type)s' == 'int'":
                {
                    "arg": {
                        "ocioconvert": "srgb_texture"
                    }
                },
                "'%(img_type)s' == 'float'":
                {
                    "args": {
                        "ocioconvert": "srgb_linear"
                    }
                }
            }
        }
    }
}