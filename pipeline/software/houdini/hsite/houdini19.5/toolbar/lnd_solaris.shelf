<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="lnd_assets" label="LnD Assets">
    <memberTool name="open_asset"/>
  </toolshelf>

  <toolshelf name="test_geometry" label="Test Geometry">
    <memberTool name="lop_testgeometry_crag"/>
    <memberTool name="lop_testgeometry_pighead"/>
    <memberTool name="lop_testgeometry_rubbertoy"/>
    <memberTool name="lop_testgeometry_shaderball"/>
    <memberTool name="lop_testgeometry_squab"/>
    <memberTool name="lop_testgeometry_templatebody"/>
    <memberTool name="lop_testgeometry_templatehead"/>
    <memberTool name="lop_testgeometry_tommy"/>
  </toolshelf>

  <tool name="open_asset" label="Open Asset" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[import os
import pipe
import pipe.util
from pipe.db import DB
from env import SG_Config

def open_asset_file():
    if hou.hipFile.hasUnsavedChanges():
        warning_response = hou.ui.displayMessage(
            "The current file has not been saved. Continue anyways?",
            buttons=("Continue", "Cancel"),
            severity=hou.severityType.ImportantMessage,
            default_choice=1
        )
        if warning_response == 1:
            return
    
    conn = DB(SG_Config)
    asset_names = conn.get_asset_name_list(sorted=True, child_mode=DB.ChildQueryMode.ROOTS)
    
    asset_response = hou.ui.selectFromList(
        asset_names,
        exclusive=True,
        message="Select the Asset File that you'd like to open.",
        title="Open Asset File",
        column_header="Assets"
    )
    
    if asset_response:
        asset_name = asset_names[asset_response[0]]
        asset = conn.get_asset_by_name(asset_name)
        asset_path = pipe.util.get_production_path() / asset.path
        if not asset_path.exists():
            warning_response = hou.ui.displayMessage(
                f"{str(asset_path)} does not exist. Create?",
                buttons=("Create Folder", "Cancel"),
                severity=hou.severityType.Message,
                default_choice=1
            )
            if warning_response == 1:
                return
            asset_path.mkdir(mode=0o770, parents=True)
        file_path = asset_path / f"{asset.name}.hipnc"
        if file_path.is_file():
            hou.hipFile.load(str(file_path), suppress_save_prompt=True)
        else:
            hou.hipFile.clear(suppress_save_prompt=True)
            hou.hipFile.save(str(file_path))
            
            #stage = hou.node("stage")
            #geo_node = stage.createNode("accomp_geo_variant")
            # material_node = stage.createNode("ccm64_edit_shader")
            # material_node.setFirstInput(geo_node)
            # publish_node = stage.createNode("accomp_asset_publish")
            # publish_node.setFirstInput(material_node)
            #stage.layoutChildren()
            
            #hou.hipFile.save(file_path)


open_asset_file()]]></script>
  </tool>

  <tool name="lop_testgeometry_crag" label="Test Geometry: Crag" icon="SOP_testgeometry_crag">
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Test Geometry</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
asset_name = 'crag'
node = loptoolutils.genericTool(kwargs, "assetreference", asset_name)
loptoolutils.referenceTestAsset(node, asset_name)]]></script>
  </tool>

  <tool name="lop_testgeometry_pighead" label="Test Geometry: Pig Head" icon="SOP_testgeometry_pighead">
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Test Geometry</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
asset_name = 'pig'
node = loptoolutils.genericTool(kwargs, "assetreference", asset_name)
loptoolutils.referenceTestAsset(node, asset_name)]]></script>
  </tool>

  <tool name="lop_testgeometry_rubbertoy" label="Test Geometry: Rubber Toy" icon="SOP_testgeometry_rubbertoy">
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Test Geometry</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
asset_name = 'rubbertoy'
node = loptoolutils.genericTool(kwargs, "assetreference", asset_name)
loptoolutils.referenceTestAsset(node, asset_name)]]></script>
  </tool>

  <tool name="lop_testgeometry_shaderball" label="Test Geometry: Shader Ball" icon="SOP_testgeometry_shaderball">
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Test Geometry</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
asset_name = 'shaderball'
node = loptoolutils.genericTool(kwargs, "assetreference", asset_name)
loptoolutils.referenceTestAsset(node, asset_name)]]></script>
  </tool>

  <tool name="lop_testgeometry_squab" label="Test Geometry: Squab" icon="SOP_testgeometry_squab">
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Test Geometry</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
asset_name = 'squab'
node = loptoolutils.genericTool(kwargs, "assetreference", asset_name)
loptoolutils.referenceTestAsset(node, asset_name)]]></script>
  </tool>

  <tool name="lop_testgeometry_tommy" label="Test Geometry: Tommy" icon="SOP_testgeometry_tommy">
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Test Geometry</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
asset_name = 'tommy'
node = loptoolutils.genericTool(kwargs, "assetreference", asset_name)
loptoolutils.referenceTestAsset(node, asset_name)]]></script>
  </tool>

  <tool name="lop_testgeometry_templatebody" label="Test Geometry: Template Body" icon="SOP_testgeometry_templatebody">
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Test Geometry</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
asset_name = 'templatebody'
node = loptoolutils.genericTool(kwargs, "assetreference", asset_name)
loptoolutils.referenceTestAsset(node, asset_name)]]></script>
  </tool>

  <tool name="lop_testgeometry_templatehead" label="Test Geometry: Template Head" icon="SOP_testgeometry_templatehead">
    <toolMenuContext name="viewer">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Test Geometry</toolSubmenu>
    <script scriptType="python"><![CDATA[import loptoolutils
asset_name = 'templatehead'
node = loptoolutils.genericTool(kwargs, "assetreference", asset_name)
loptoolutils.referenceTestAsset(node, asset_name)]]></script>
  </tool>

  <shelfSet name="solaris_lnd0" label="Solaris Geometry">
    <memberToolshelf name="lnd_assets"/>
    <memberToolshelf name="test_geometry"/>
  </shelfSet>

  <shelfSet name="solaris_lnd" label="Solaris Geometry">
    <memberToolshelf name="lnd_assets"/>
    <memberToolshelf name="test_geometry"/>
  </shelfSet>
</shelfDocument>
